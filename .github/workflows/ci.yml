name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: adhd_research_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.13.0'
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Install Python dependencies
      run: |
        cd adhd_research_api
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        echo 'DATABASE_URL="postgresql://postgres:postgres@localhost:5432/adhd_research_test?schema=public"' > .env

    - name: Run Prisma migrations
      run: |
        npx prisma migrate deploy
        npx prisma generate

    - name: Run database migration
      run: node migrate_data.js

    - name: Test API endpoints
      run: |
        cd adhd_research_api
        source venv/bin/activate || true
        python -c "
        import sys
        sys.path.append('src')
        from database_config import prisma
        try:
            result = prisma.query_raw('SELECT COUNT(*) FROM research_entries;')
            print(f'Database test passed: {len(result)} entries found')
        except Exception as e:
            print(f'Database test failed: {e}')
            sys.exit(1)
        "

    - name: Validate Prisma schema
      run: npx prisma validate

    - name: Check code formatting
      run: |
        cd adhd_research_api
        python -m py_compile src/main.py
        python -m py_compile src/routes/research.py
        python -m py_compile src/database_config.py

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security audit for Node.js
      run: npm audit --audit-level moderate

    - name: Set up Python for security scan
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install safety for Python security scan
      run: pip install safety

    - name: Run Python security scan
      run: |
        cd adhd_research_api
        safety check -r requirements.txt

  quality-gates:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
    - uses: actions/checkout@v4

    - name: Quality gate passed
      run: echo "All quality gates passed successfully"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here

